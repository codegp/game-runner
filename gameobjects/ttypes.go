// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package gameobjects

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Direction int64

const (
	Direction_NORTH      Direction = 0
	Direction_NORTH_EAST Direction = 1
	Direction_EAST       Direction = 2
	Direction_SOUTH_EAST Direction = 3
	Direction_SOUTH      Direction = 4
	Direction_SOUTH_WEST Direction = 5
	Direction_WEST       Direction = 6
	Direction_NORTH_WEST Direction = 7
	Direction_NONE       Direction = 8
)

func (p Direction) String() string {
	switch p {
	case Direction_NORTH:
		return "NORTH"
	case Direction_NORTH_EAST:
		return "NORTH_EAST"
	case Direction_EAST:
		return "EAST"
	case Direction_SOUTH_EAST:
		return "SOUTH_EAST"
	case Direction_SOUTH:
		return "SOUTH"
	case Direction_SOUTH_WEST:
		return "SOUTH_WEST"
	case Direction_WEST:
		return "WEST"
	case Direction_NORTH_WEST:
		return "NORTH_WEST"
	case Direction_NONE:
		return "NONE"
	}
	return "<UNSET>"
}

func DirectionFromString(s string) (Direction, error) {
	switch s {
	case "NORTH":
		return Direction_NORTH, nil
	case "NORTH_EAST":
		return Direction_NORTH_EAST, nil
	case "EAST":
		return Direction_EAST, nil
	case "SOUTH_EAST":
		return Direction_SOUTH_EAST, nil
	case "SOUTH":
		return Direction_SOUTH, nil
	case "SOUTH_WEST":
		return Direction_SOUTH_WEST, nil
	case "WEST":
		return Direction_WEST, nil
	case "NORTH_WEST":
		return Direction_NORTH_WEST, nil
	case "NONE":
		return Direction_NONE, nil
	}
	return Direction(0), fmt.Errorf("not a valid Direction string")
}

func DirectionPtr(v Direction) *Direction { return &v }

func (p Direction) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Direction) UnmarshalText(text []byte) error {
	q, err := DirectionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type Map [][]*LocationInfo

func MapPtr(v Map) *Map { return &v }

// Attributes:
//  - Message
type InvalidMove struct {
	Message string `thrift:"message,1" json:"message"`
}

func NewInvalidMove() *InvalidMove {
	return &InvalidMove{}
}

func (p *InvalidMove) GetMessage() string {
	return p.Message
}
func (p *InvalidMove) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InvalidMove) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *InvalidMove) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidMove"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidMove) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *InvalidMove) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidMove(%+v)", *p)
}

func (p *InvalidMove) Error() string {
	return p.String()
}

// Attributes:
//  - X
//  - Y
type Location struct {
	X int32 `thrift:"x,1,required" json:"x"`
	Y int32 `thrift:"y,2,required" json:"y"`
}

func NewLocation() *Location {
	return &Location{}
}

func (p *Location) GetX() int32 {
	return p.X
}

func (p *Location) GetY() int32 {
	return p.Y
}
func (p *Location) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetX bool = false
	var issetY bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetX = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetY = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetX {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field X is not set"))
	}
	if !issetY {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Y is not set"))
	}
	return nil
}

func (p *Location) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.X = v
	}
	return nil
}

func (p *Location) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Y = v
	}
	return nil
}

func (p *Location) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Location"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Location) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("x", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:x: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.X)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.x (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:x: ", p), err)
	}
	return err
}

func (p *Location) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("y", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:y: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Y)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.y (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:y: ", p), err)
	}
	return err
}

func (p *Location) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Location(%+v)", *p)
}

// Attributes:
//  - ItemTypeID
//  - ID
type Item struct {
	ItemTypeID int64 `thrift:"itemTypeID,1,required" json:"itemTypeID"`
	ID         int32 `thrift:"ID,2,required" json:"ID"`
}

func NewItem() *Item {
	return &Item{}
}

func (p *Item) GetItemTypeID() int64 {
	return p.ItemTypeID
}

func (p *Item) GetID() int32 {
	return p.ID
}
func (p *Item) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetItemTypeID bool = false
	var issetID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetItemTypeID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetID = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetItemTypeID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ItemTypeID is not set"))
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	return nil
}

func (p *Item) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ItemTypeID = v
	}
	return nil
}

func (p *Item) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Item) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Item"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Item) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("itemTypeID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:itemTypeID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ItemTypeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.itemTypeID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:itemTypeID: ", p), err)
	}
	return err
}

func (p *Item) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ID: ", p), err)
	}
	return err
}

func (p *Item) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Item(%+v)", *p)
}

// Attributes:
//  - ID
//  - Loc
//  - Health
//  - AttackDelay
//  - MoveDelay
//  - SpawnDelay
//  - TeamID
//  - BotTypeID
//  - Items
type Bot struct {
	ID          int32     `thrift:"ID,1,required" json:"ID"`
	Loc         *Location `thrift:"loc,2,required" json:"loc"`
	Health      float64   `thrift:"health,3,required" json:"health"`
	AttackDelay float64   `thrift:"attackDelay,4,required" json:"attackDelay"`
	MoveDelay   float64   `thrift:"moveDelay,5,required" json:"moveDelay"`
	SpawnDelay  float64   `thrift:"spawnDelay,6,required" json:"spawnDelay"`
	TeamID      int64     `thrift:"teamID,7,required" json:"teamID"`
	BotTypeID   int64     `thrift:"botTypeID,8,required" json:"botTypeID"`
	Items       []*Item   `thrift:"items,9,required" json:"items"`
}

func NewBot() *Bot {
	return &Bot{}
}

func (p *Bot) GetID() int32 {
	return p.ID
}

var Bot_Loc_DEFAULT *Location

func (p *Bot) GetLoc() *Location {
	if !p.IsSetLoc() {
		return Bot_Loc_DEFAULT
	}
	return p.Loc
}

func (p *Bot) GetHealth() float64 {
	return p.Health
}

func (p *Bot) GetAttackDelay() float64 {
	return p.AttackDelay
}

func (p *Bot) GetMoveDelay() float64 {
	return p.MoveDelay
}

func (p *Bot) GetSpawnDelay() float64 {
	return p.SpawnDelay
}

func (p *Bot) GetTeamID() int64 {
	return p.TeamID
}

func (p *Bot) GetBotTypeID() int64 {
	return p.BotTypeID
}

func (p *Bot) GetItems() []*Item {
	return p.Items
}
func (p *Bot) IsSetLoc() bool {
	return p.Loc != nil
}

func (p *Bot) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetLoc bool = false
	var issetHealth bool = false
	var issetAttackDelay bool = false
	var issetMoveDelay bool = false
	var issetSpawnDelay bool = false
	var issetTeamID bool = false
	var issetBotTypeID bool = false
	var issetItems bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetLoc = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetHealth = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetAttackDelay = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetMoveDelay = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetSpawnDelay = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetTeamID = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetBotTypeID = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
			issetItems = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetLoc {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Loc is not set"))
	}
	if !issetHealth {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Health is not set"))
	}
	if !issetAttackDelay {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AttackDelay is not set"))
	}
	if !issetMoveDelay {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MoveDelay is not set"))
	}
	if !issetSpawnDelay {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SpawnDelay is not set"))
	}
	if !issetTeamID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TeamID is not set"))
	}
	if !issetBotTypeID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BotTypeID is not set"))
	}
	if !issetItems {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Items is not set"))
	}
	return nil
}

func (p *Bot) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Bot) readField2(iprot thrift.TProtocol) error {
	p.Loc = &Location{}
	if err := p.Loc.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Loc), err)
	}
	return nil
}

func (p *Bot) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Health = v
	}
	return nil
}

func (p *Bot) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AttackDelay = v
	}
	return nil
}

func (p *Bot) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MoveDelay = v
	}
	return nil
}

func (p *Bot) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SpawnDelay = v
	}
	return nil
}

func (p *Bot) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.TeamID = v
	}
	return nil
}

func (p *Bot) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.BotTypeID = v
	}
	return nil
}

func (p *Bot) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Item, 0, size)
	p.Items = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &Item{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Items = append(p.Items, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Bot) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Bot"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Bot) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Bot) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("loc", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loc: ", p), err)
	}
	if err := p.Loc.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Loc), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loc: ", p), err)
	}
	return err
}

func (p *Bot) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("health", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:health: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Health)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.health (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:health: ", p), err)
	}
	return err
}

func (p *Bot) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("attackDelay", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attackDelay: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.AttackDelay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.attackDelay (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attackDelay: ", p), err)
	}
	return err
}

func (p *Bot) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moveDelay", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:moveDelay: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.MoveDelay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moveDelay (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:moveDelay: ", p), err)
	}
	return err
}

func (p *Bot) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("spawnDelay", thrift.DOUBLE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:spawnDelay: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.SpawnDelay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.spawnDelay (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:spawnDelay: ", p), err)
	}
	return err
}

func (p *Bot) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("teamID", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:teamID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TeamID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.teamID (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:teamID: ", p), err)
	}
	return err
}

func (p *Bot) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("botTypeID", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:botTypeID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.BotTypeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.botTypeID (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:botTypeID: ", p), err)
	}
	return err
}

func (p *Bot) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("items", thrift.LIST, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:items: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:items: ", p), err)
	}
	return err
}

func (p *Bot) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Bot(%+v)", *p)
}

// Attributes:
//  - Terrain
//  - Bot
//  - Item
//  - Loc
type LocationInfo struct {
	Terrain int64     `thrift:"terrain,1,required" json:"terrain"`
	Bot     *Bot      `thrift:"bot,2,required" json:"bot"`
	Item    *Item     `thrift:"item,3,required" json:"item"`
	Loc     *Location `thrift:"loc,4,required" json:"loc"`
}

func NewLocationInfo() *LocationInfo {
	return &LocationInfo{}
}

func (p *LocationInfo) GetTerrain() int64 {
	return p.Terrain
}

var LocationInfo_Bot_DEFAULT *Bot

func (p *LocationInfo) GetBot() *Bot {
	if !p.IsSetBot() {
		return LocationInfo_Bot_DEFAULT
	}
	return p.Bot
}

var LocationInfo_Item_DEFAULT *Item

func (p *LocationInfo) GetItem() *Item {
	if !p.IsSetItem() {
		return LocationInfo_Item_DEFAULT
	}
	return p.Item
}

var LocationInfo_Loc_DEFAULT *Location

func (p *LocationInfo) GetLoc() *Location {
	if !p.IsSetLoc() {
		return LocationInfo_Loc_DEFAULT
	}
	return p.Loc
}
func (p *LocationInfo) IsSetBot() bool {
	return p.Bot != nil
}

func (p *LocationInfo) IsSetItem() bool {
	return p.Item != nil
}

func (p *LocationInfo) IsSetLoc() bool {
	return p.Loc != nil
}

func (p *LocationInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTerrain bool = false
	var issetBot bool = false
	var issetItem bool = false
	var issetLoc bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetTerrain = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetBot = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetItem = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetLoc = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTerrain {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Terrain is not set"))
	}
	if !issetBot {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Bot is not set"))
	}
	if !issetItem {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Item is not set"))
	}
	if !issetLoc {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Loc is not set"))
	}
	return nil
}

func (p *LocationInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Terrain = v
	}
	return nil
}

func (p *LocationInfo) readField2(iprot thrift.TProtocol) error {
	p.Bot = &Bot{}
	if err := p.Bot.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Bot), err)
	}
	return nil
}

func (p *LocationInfo) readField3(iprot thrift.TProtocol) error {
	p.Item = &Item{}
	if err := p.Item.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Item), err)
	}
	return nil
}

func (p *LocationInfo) readField4(iprot thrift.TProtocol) error {
	p.Loc = &Location{}
	if err := p.Loc.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Loc), err)
	}
	return nil
}

func (p *LocationInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LocationInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LocationInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("terrain", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:terrain: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Terrain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.terrain (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:terrain: ", p), err)
	}
	return err
}

func (p *LocationInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bot", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bot: ", p), err)
	}
	if err := p.Bot.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Bot), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bot: ", p), err)
	}
	return err
}

func (p *LocationInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("item", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:item: ", p), err)
	}
	if err := p.Item.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Item), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:item: ", p), err)
	}
	return err
}

func (p *LocationInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("loc", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:loc: ", p), err)
	}
	if err := p.Loc.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Loc), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:loc: ", p), err)
	}
	return err
}

func (p *LocationInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LocationInfo(%+v)", *p)
}

// Attributes:
//  - ID
//  - Source
//  - Target
//  - ActionTypeID
type Action struct {
	ID           int64     `thrift:"ID,1,required" json:"ID"`
	Source       *Location `thrift:"source,2,required" json:"source"`
	Target       *Location `thrift:"target,3,required" json:"target"`
	ActionTypeID int64     `thrift:"actionTypeID,4,required" json:"actionTypeID"`
}

func NewAction() *Action {
	return &Action{}
}

func (p *Action) GetID() int64 {
	return p.ID
}

var Action_Source_DEFAULT *Location

func (p *Action) GetSource() *Location {
	if !p.IsSetSource() {
		return Action_Source_DEFAULT
	}
	return p.Source
}

var Action_Target_DEFAULT *Location

func (p *Action) GetTarget() *Location {
	if !p.IsSetTarget() {
		return Action_Target_DEFAULT
	}
	return p.Target
}

func (p *Action) GetActionTypeID() int64 {
	return p.ActionTypeID
}
func (p *Action) IsSetSource() bool {
	return p.Source != nil
}

func (p *Action) IsSetTarget() bool {
	return p.Target != nil
}

func (p *Action) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetSource bool = false
	var issetTarget bool = false
	var issetActionTypeID bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetSource = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetTarget = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetActionTypeID = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetSource {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Source is not set"))
	}
	if !issetTarget {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Target is not set"))
	}
	if !issetActionTypeID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ActionTypeID is not set"))
	}
	return nil
}

func (p *Action) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Action) readField2(iprot thrift.TProtocol) error {
	p.Source = &Location{}
	if err := p.Source.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Source), err)
	}
	return nil
}

func (p *Action) readField3(iprot thrift.TProtocol) error {
	p.Target = &Location{}
	if err := p.Target.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Target), err)
	}
	return nil
}

func (p *Action) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ActionTypeID = v
	}
	return nil
}

func (p *Action) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Action"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Action) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Action) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:source: ", p), err)
	}
	if err := p.Source.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Source), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:source: ", p), err)
	}
	return err
}

func (p *Action) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("target", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target: ", p), err)
	}
	if err := p.Target.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Target), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target: ", p), err)
	}
	return err
}

func (p *Action) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("actionTypeID", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:actionTypeID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ActionTypeID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.actionTypeID (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:actionTypeID: ", p), err)
	}
	return err
}

func (p *Action) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Action(%+v)", *p)
}

// Attributes:
//  - Maps
//  - Actions
type History struct {
	Maps    [][][]*LocationInfo `thrift:"maps,1,required" json:"maps"`
	Actions [][]*Action         `thrift:"actions,2,required" json:"actions"`
}

func NewHistory() *History {
	return &History{}
}

func (p *History) GetMaps() [][][]*LocationInfo {
	return p.Maps
}

func (p *History) GetActions() [][]*Action {
	return p.Actions
}
func (p *History) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMaps bool = false
	var issetActions bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetMaps = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetActions = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMaps {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Maps is not set"))
	}
	if !issetActions {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Actions is not set"))
	}
	return nil
}

func (p *History) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][][]*LocationInfo, 0, size)
	p.Maps = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make(Map, 0, size)
		_elem1 := tSlice
		for i := 0; i < size; i++ {
			_, size, err := iprot.ReadListBegin()
			if err != nil {
				return thrift.PrependError("error reading list begin: ", err)
			}
			tSlice := make([]*LocationInfo, 0, size)
			_elem2 := tSlice
			for i := 0; i < size; i++ {
				_elem3 := &LocationInfo{}
				if err := _elem3.Read(iprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
				}
				_elem2 = append(_elem2, _elem3)
			}
			if err := iprot.ReadListEnd(); err != nil {
				return thrift.PrependError("error reading list end: ", err)
			}
			_elem1 = append(_elem1, _elem2)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Maps = append(p.Maps, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *History) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]*Action, 0, size)
	p.Actions = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*Action, 0, size)
		_elem4 := tSlice
		for i := 0; i < size; i++ {
			_elem5 := &Action{}
			if err := _elem5.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
			}
			_elem4 = append(_elem4, _elem5)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Actions = append(p.Actions, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *History) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("History"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *History) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maps", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maps: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Maps)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Maps {
		if err := oprot.WriteListBegin(thrift.LIST, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing list begin: ", err)
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return thrift.PrependError("error writing list end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maps: ", p), err)
	}
	return err
}

func (p *History) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("actions", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:actions: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.Actions)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Actions {
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:actions: ", p), err)
	}
	return err
}

func (p *History) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("History(%+v)", *p)
}
